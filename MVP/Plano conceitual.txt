üéØ PLANO REVISADO: DevLink - PLATAFORMA FREELANCER
üìã VIS√ÉO GERAL DO SISTEMA DE ASSINATURAS

√Årea 1: Freelancers (Prestadores de servi√ßo)
‚úÖ Totalmente gratuita
Podem se cadastrar, criar perfis, enviar propostas


√Årea 2: Clientes (Quem contrata servi√ßos)
Plano Gratuito: 1 projeto por m√™s
Plano Premium: R$ 19,90/m√™s - projetos ilimitados

---

## üéØ **Por que usar Docker no in√≠cio do projeto?**
Voc√™ fez certo! Docker garante:
- Ambiente de desenvolvimento consistente (evita "funciona na minha m√°quina")
- Isolamento do banco de dados e aplica√ß√£o
- F√°cil replica√ß√£o para outros desenvolvedores ou ambientes
- Controle de vers√µes de depend√™ncias (MySQL, PHP, etc)

---

## üìã **PLANO DE A√á√ÉO PASSO A PASSO**

### **FASE 1: MODELOS (MODELS) - Funda√ß√£o da Aplica√ß√£o**
1. **Criar os Models** baseados nas migrations:
   - `User` (j√° existe, mas pode precisar de ajustes)
   - `Profile`
   - `Project`
   - `Proposal`
   - `SubscriptionPlan`
   - `UserSubscription`
   - `Transaction`

2. **Definir rela√ß√µes nos Models** (exemplo):
```php
// User.php
public function profile() {
    return $this->hasOne(Profile::class);
}

public function projects() {
    return $this->hasMany(Project::class);
}

public function subscriptions() {
    return $this->hasMany(UserSubscription::class);
}
```

3. **Criar Factories** para testes com dados falsos

---

### **FASE 2: CONTROLADORES (CONTROLLERS) - L√≥gica de Neg√≥cio**
1. **Criar controllers** para cada entidade principal:
   - `AuthController` (login/registro)
   - `ProjectController`
   - `ProposalController`
   - `SubscriptionController`
   - `ProfileController`

2. **Implementar m√©todos CRUD** em cada controller:
   - `index()`, `create()`, `store()`, `show()`, `edit()`, `update()`, `destroy()`

3. **Adicionar l√≥gica de neg√≥cio** espec√≠fica:
   - Verifica√ß√£o de assinatura para criar projetos
   - Sistema de propostas
   - Processamento de pagamentos

---

### **FASE 3: ROTAS (ROUTES) - Navega√ß√£o**
1. **Definir rotas no arquivo `web.php`**:
```php
// Autentica√ß√£o
Route::get('/register', [AuthController::class, 'showRegistration']);
Route::post('/register', [AuthController::class, 'register']);

// Projetos
Route::get('/projects', [ProjectController::class, 'index']);
Route::get('/projects/create', [ProjectController::class, 'create'])->middleware('auth');
Route::post('/projects', [ProjectController::class, 'store'])->middleware('auth');

// Assinaturas
Route::get('/subscription', [SubscriptionController::class, 'index'])->middleware('auth');
```

2. **Criar rotas de API** (se necess√°rio) no `api.php`

3. **Agrupar rotas com middlewares** apropriados

---

### **FASE 4: VIEWS (FRONT-END) - Interface**
1. **Configurar Tailwind CSS**:
   - Instalar via NPM: `npm install -D tailwindcss`
   - Configurar `tailwind.config.js`
   - Importar no CSS principal

2. **Criar layout base** com componentes comuns:
   - `layouts/app.blade.php` (navbar, footer)
   - Componentes: navigation, cards, forms

3. **Criar views para cada funcionalidade**:
   - `auth/register.blade.php`
   - `projects/index.blade.php`
   - `projects/create.blade.php`
   - `subscription/plans.blade.php`

4. **Implementar design responsivo** com Tailwind

---

### **FASE 5: AUTENTICA√á√ÉO E PERMISS√ïES**
1. **Configurar sistema de autentica√ß√£o** Laravel
2. **Criar middlewares** personalizados:
   - `CheckSubscription` - verifica se usu√°rio tem assinatura ativa
   - `CheckUserType` - diferencia freelancers e clientes

---

### **FASE 6: SISTEMA DE PAGAMENTOS**
1. **Integrar com gateway de pagamento** (ex: Stripe, Mercado Pago)
2. **Criar webhooks** para processar retornos de pagamento
3. **Implementar sistema de notifica√ß√µes** por email

---

### **FASE 7: TESTES E DEPLOY**
1. **Criar testes** para funcionalidades cr√≠ticas
2. **Otimizar para produ√ß√£o**
3. **Configurar ambiente de produ√ß√£o** no Docker
4. **Deploy** (ex: AWS, DigitalOcean)

---

## üìä **CRONOGRAMA SUGERIDO (Prioriza√ß√£o)**
1. **Semana 1**: Models + Autentica√ß√£o b√°sica
2. **Semana 2**: CRUD de Projects + Proposals
3. **Semana 3**: Sistema de Assinaturas
4. **Semana 4**: Front-end + Pagamentos
5. **Semana 5**: Testes + Polimento

---

## üöÄ **PR√ìXIMOS PASSOS IMEDIATOS**
1. **Comece pelos Models** - s√£o a base de tudo
2. **Configure o `.env`** com as credenciais do banco Docker
3. **Rode as migrations**: `php artisan migrate`
4. **Crie o primeiro Model**: `php artisan make:model Profile -mcr`

Quer que eu detalhe alguma fase espec√≠fica? Posso gerar c√≥digo exemplo para qualquer uma dessas etapas!